# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import importlib

import config.custom_9
import config.custom_zeus
import config.stable_zeus
import config.custom_master
import config.stable_master
import config.windows_tools
import config.utils
import schedulers
import factories.openxt
import factories.windows_tools

importlib.reload(config.custom_9)
importlib.reload(config.custom_zeus)
importlib.reload(config.stable_zeus)
importlib.reload(config.custom_master)
importlib.reload(config.stable_master)
importlib.reload(config.windows_tools)
importlib.reload(config.utils)
importlib.reload(schedulers)
importlib.reload(factories.openxt)
importlib.reload(factories.windows_tools)

# This file must be installed as 'master.cfg' in your buildmaster's base
# directory.

# This is the dictionary that the buildmaster pays attention to. We also use a
# shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is a
# Worker object, specifying a unique worker name and password.
# The same worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("debian8-0", "password"),
    worker.Worker("debian10-0", "password"),
    worker.Worker("OpenXT-Win-0", "password"),
]

workers_oe_9 = {}
workers_oe_9['names'] = [ "debian8-0" ]
workers_oe_9['workdir'] = "/var/builds/openxt/auto/9"
workers_oe_9['deploydir'] = "/srv/http/OpenXT/auto/9"

workers_oe_zeus = {}
workers_oe_zeus['names'] = [ "debian10-0" ]
workers_oe_zeus['workdir'] = "/var/builds/openxt/auto/zeus"
workers_oe_zeus['deploydir'] = "/srv/http/OpenXT/auto/zeus"

workers_oe_master = {}
workers_oe_master['names'] = [ "debian10-0" ]
workers_oe_master['workdir'] = "/var/builds/openxt/auto/master"
workers_oe_master['deploydir'] = "/srv/http/OpenXT/auto/master"

workers_win = {}
workers_win['names'] = [ "OpenXT-Win-0" ]
workers_win['workdir'] = r"c:\builds"
workers_win['deploydir'] = "/srv/http/OpenXT/auto/windows"

# Locking: Limit the number of builds per worker.
lock_workers = util.WorkerLock(
    "lock_workers",
    maxCount=1
)

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their --master
# option)
c['protocols'] = { 'pb': { 'port': 9989 } }

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from config.utils import (
    codebaseGenerator,
    change_source
)

c['change_source'] = change_source
c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from schedulers import (
    scheduler_force_custom,
    scheduler_force_windows_tools,
    scheduler_force_stable,
    scheduler_nightly,
    scheduler_nightly_windows_tools
)

from config.custom_9 import codebases_custom_9
from config.custom_zeus import codebases_custom_zeus
from config.stable_zeus import codebases_stable_zeus
from config.custom_master import (
    codebases_custom_master,
    codebases_custom_master_vglass,
)
from config.stable_master import codebases_stable_master

from config.windows_tools import (
    codebases_windows_tools_8_2_0,
    codebases_windows_tools_9_0_0,
)

c['schedulers'] = [
    # OpenXT 9
    scheduler_force_custom(
        "custom-9", "Custom 9 Legacy",
        [ "9-custom-clean" ],
        "stable-9", codebases_custom_9
    ),
    scheduler_nightly(
        "nightly-9-tip", [ "9-custom-clean" ],
        "stable-9", codebases_custom_9,
        22, 00
    ),

    # OpenXT Zeus
    scheduler_force_custom(
        "custom-zeus", "Custom Zeus",
        [ "zeus-custom-quick", "zeus-custom-clean" ],
        "zeus-externalsrc", codebases_custom_zeus
    ),
    scheduler_force_stable(
        "stable-zeus", [ "zeus-stable", "zeus-stable-sstate" ],
        "zeus", codebases_stable_zeus
    ),
    scheduler_nightly(
        "nightly-stable-zeus", [ "zeus-stable-sstate" ],
        "zeus", codebases_stable_zeus,
        1, 0
    ),

    # OpenXT Master
    scheduler_force_custom(
        "custom-master", "Custom Master",
        [ "master-custom-quick", "master-custom-clean" ],
        "master-externalsrc", codebases_custom_master
    ),
    scheduler_force_custom(
        "custom-master-vglass", "Custom Master: vGlass",
        [ "master-custom-vglass" ],
        "vglass", codebases_custom_master_vglass
    ),
    scheduler_force_stable(
        "stable-master", [ "master-stable", "master-stable-sstate" ],
        "master", codebases_stable_master
    ),
    scheduler_nightly(
        "nightly-stable-master", [ "master-stable-sstate" ],
        "master", codebases_stable_master,
        3, 0
    ),

    # Wintools
    scheduler_force_windows_tools(
        "windows-tools-8-2-0",
        "Manual Windows Tools 8.2.0 build",
        [ "windows-tools-8-2-0" ],
        codebases_windows_tools_8_2_0
    ),
    scheduler_nightly_windows_tools(
        "nightly-windows-tools-8-2-0", [ "windows-tools-8-2-0" ],
        codebases_windows_tools_8_2_0,
        5, 00
    ),
    scheduler_force_windows_tools(
        "windows-tools-9-0-0",
        "Manual Windows Tools 9.0.0 build",
        [ "windows-tools-9-0-0" ],
        codebases_windows_tools_9_0_0
    ),
    scheduler_nightly_windows_tools(
        "nightly-windows-tools-9-0-0", [ "windows-tools-9-0-0" ],
        codebases_windows_tools_9_0_0,
        5, 00
    )
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.
from factories.openxt import (
    factory_custom_clean,
    factory_custom_quick,
    factory_custom_legacy_clean,
    factory_stable,
)
from factories.windows_tools import (
    factory_windows_tools_8_2_0,
    factory_windows_tools_9_0_0,
)

c['builders'] = [
    util.BuilderConfig(
        name="9-custom-clean",
        description="OpenXT 9: Customizable clean build.",
        workernames=workers_oe_9['names'],
        factory=factory_custom_legacy_clean(
            workers_oe_9['workdir'], workers_oe_9['deploydir'],
            codebases_custom_9),
        locks=[ lock_workers.access('counting') ]
    ),

# OpenXT/Zeus
    util.BuilderConfig(
        name="zeus-custom-quick",
        description="OpenXT/Zeus: Customizable sstate based build.",
        workernames=workers_oe_zeus['names'],
        factory=factory_custom_quick(
            workers_oe_zeus['workdir'], workers_oe_zeus['deploydir'],
            codebases_custom_zeus),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="zeus-custom-clean",
        description="OpenXT/Zeus: Customizable clean build.",
        workernames=workers_oe_zeus['names'],
        factory=factory_custom_clean(
            workers_oe_zeus['workdir'], workers_oe_zeus['deploydir'],
            codebases_custom_zeus),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="zeus-stable",
        description="OpenXT/Zeus: Stable build.",
        workernames=workers_oe_zeus['names'],
        factory=factory_stable(
            workers_oe_zeus['workdir'], workers_oe_zeus['deploydir'],
            codebases_stable_zeus, False),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="zeus-stable-sstate",
        description="OpenXT/Zeus: Stable build.",
        workernames=workers_oe_zeus['names'],
        factory=factory_stable(
            workers_oe_zeus['workdir'], workers_oe_zeus['deploydir'],
            codebases_stable_zeus, True),
        locks=[ lock_workers.access('counting') ]
    ),

# OpenXT/Master
    util.BuilderConfig(
        name="master-custom-quick",
        description="OpenXT/Master: Customizable sstate based build.",
        workernames=workers_oe_master['names'],
        factory=factory_custom_quick(
            workers_oe_master['workdir'], workers_oe_master['deploydir'],
            codebases_custom_master),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="master-custom-clean",
        description="OpenXT/Master: Customizable clean build.",
        workernames=workers_oe_master['names'],
        factory=factory_custom_clean(
            workers_oe_master['workdir'], workers_oe_master['deploydir'],
            codebases_custom_master),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="master-custom-vglass",
        description="OpenXT/Master: vGlass testing build.",
        workernames=workers_oe_master['names'],
        factory=factory_custom_quick(
            workers_oe_master['workdir'], workers_oe_master['deploydir'],
            codebases_custom_master_vglass),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="master-stable",
        description="OpenXT/Master: Stable build.",
        workernames=workers_oe_master['names'],
        factory=factory_stable(
            workers_oe_master['workdir'], workers_oe_master['deploydir'],
            codebases_stable_master, False),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="master-stable-sstate",
        description="OpenXT/Master: Stable build.",
        workernames=workers_oe_master['names'],
        factory=factory_stable(
            workers_oe_master['workdir'], workers_oe_master['deploydir'],
            codebases_stable_master, True),
        locks=[ lock_workers.access('counting') ]
    ),

# OpenXT Windows PV tools.
    util.BuilderConfig(
        name="windows-tools-8-2-0",
        description="OpenXT: Windows PV tools build based on Xen upstream 8.2.0.",
        workernames=workers_win['names'],
        factory=factory_windows_tools_8_2_0(
            workers_win['workdir'] + r'\8.2.0',
            workers_win['deploydir'] + '/8.2.0',
            codebases_windows_tools_8_2_0),
        locks=[ lock_workers.access('counting') ]
    ),
    util.BuilderConfig(
        name="windows-tools-9-0-0",
        description="OpenXT: Windows PV tools build based on Xen upstream 9.0.0.",
        workernames=workers_win['names'],
        factory=factory_windows_tools_9_0_0(
            workers_win['workdir'] + r'\9.0.0',
            workers_win['deploydir'] + '/9.0.0',
            codebases_windows_tools_9_0_0),
        locks=[ lock_workers.access('counting') ]
    )
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "OpenXT Buildbot"
c['titleURL'] = "https://github.com/OpenXT"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# TODO: Use util.HTPasswdAuth once fixed.
# https://github.com/buildbot/buildbot/issues/3126
import subprocess
class HTPasswdAuth(util.CustomAuth):
    def check_credentials(self, user, passwd):
        return subprocess.run([ "htpasswd", "-vb", ".htpasswd", user, passwd ]).returncode == 0

# minimalistic Config to activate new web UI
c['www'] = {
    'port': 8010,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {}
    },
#    'auth': util.HTPasswdAuth('.htpasswd'),
    'auth': HTPasswdAuth(),
    'authz': util.Authz(
        allowRules=[ util.AnyControlEndpointMatcher(role='admin') ],
        roleMatchers=[
            util.RolesFromUsername(
                roles=[ 'admin' ],
                usernames=[ 'admin' ])
        ])
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a
    # dedicated database, such as PostgreSQL or MySQL, for use in production
    # environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}

####### Misc

# Don't send usage analysis info to buildbot.net.
c['buildbotNetUsageData'] = None
